{"version":3,"sources":["logo.svg","Components/Treasure Hunt/CesarCipher.js","Components/Treasure Hunt/BookCipher.js","Components/Treasure Hunt/MorseCode.js","Components/Treasure Hunt/Binary.js","Components/Treasure Hunt/TresureHunt.js","Components/NavBar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["CesarCipher","React","useState","value","setValue","text","setText","setFlag","Box","sx","width","bgcolor","my","mx","Grid","container","alignItems","item","xs","Typography","gutterBottom","variant","component","align","Divider","color","m","TextField","id","label","multiline","minRows","defaultValue","onChange","event","target","mt","ml","mb","Button","onClick","output","j","i","length","c","match","code","charCodeAt","k","String","fromCharCode","encryptText","InputProps","readOnly","startIcon","navigator","clipboard","writeText","then","console","log","err","error","copyTextToClipboard","BookCipher","keyInput","setKeyInput","keyCode","MorseCode","alphabet","charAt","toLowerCase","Binary","dec2bin","dec","toString","TabPanel","props","children","index","other","role","hidden","p","a11yProps","TresureHunt","theme","useTheme","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","drawerWidth","openedMixin","transition","transitions","create","easing","sharp","duration","enteringScreen","overflowX","closedMixin","leavingScreen","spacing","breakpoints","up","DrawerHeader","styled","display","justifyContent","padding","mixins","toolbar","MuiAppBar","shouldForwardProp","prop","open","zIndex","drawer","marginLeft","Drawer","MuiDrawer","flexShrink","whiteSpace","boxSizing","NavBar","setOpen","CssBaseline","Toolbar","IconButton","edge","marginRight","noWrap","List","map","ListItem","button","ListItemIcon","ListItemText","primary","flexGrow","App","darkTheme","createTheme","palette","mode","className","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55c931b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n\r\nexport default function CesarCipher() {\r\n\r\n  const [value, setValue] = React.useState('');\r\n  const [text, setText] = React.useState('');\r\n  const [flag, setFlag] = React.useState(false);\r\n\r\n\r\n  const handleValueChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n      <Box sx={{ my: 3, mx: 2 }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\" align='left'>\r\n              Cesar Cipher\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n        <Typography color=\"text.secondary\" variant=\"body2\" align='left' sx={{ my: 3 }}>\r\n          Enter the text in plain text and press encrypt\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ m: 2 }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs align='left'>\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Input\"\r\n              multiline\r\n              minRows={4}\r\n              defaultValue=\"Enter Plain text here\"\r\n              value={value}\r\n              onChange={handleValueChange}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n              <Button variant=\"contained\" onClick={() => encryptText()}>Encrypt &gt;</Button>\r\n            </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <TextField\r\n              id=\"outlined-read-only-input\"\r\n              label=\"Output\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n              multiline\r\n              minRows={4}\r\n              defaultValue=\"Encrypted text\"\r\n              value={text}\r\n              onChange={handleTextChange}\r\n            />\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n              <Button variant=\"contained\" startIcon={<ContentCopyIcon />} onClick={() => copyTextToClipboard(text)}>Copy</Button>\r\n            </Box>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  )\r\n\r\n  function encryptText() {\r\n    setFlag(true)\r\n\r\n    var output = ''\r\n    setText(output)\r\n\r\n    var j = 1;\r\n    // Go through each character\r\n    for (var i = 0; i < value.length; i++) {\r\n      // Get the character we'll be appending\r\n      var c = value[i];\r\n\r\n      // If it's not a letter...\r\n      if (!c.match(/[a-z]/i)) {\r\n        j = 1;\r\n        output += c;\r\n        continue;\r\n      }\r\n      // Get its code\r\n      var code = value.charCodeAt(i);\r\n\r\n      if ((j % 2) == 1) {\r\n\r\n        // Uppercase letters\r\n        if (code >= 65 && code <= 90) {\r\n          for (var k = 0; k < j; k++) {\r\n            code += 1;\r\n            if (code > 90) {\r\n              code = 65;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Lowercase letters\r\n        else if (code >= 97 && code <= 122) {\r\n          for (var k = 0; k < j; k++) {\r\n            code += 1;\r\n            if (code > 122) {\r\n              code = 97;\r\n            }\r\n          }\r\n        }\r\n\r\n      } else {\r\n        // Uppercase letters\r\n        if (code >= 65 && code <= 90) {\r\n          for (var k = 0; k < j; k++) {\r\n            code -= 1;\r\n            if (code < 65) {\r\n              code = 90;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Lowercase letters\r\n        else if (code >= 97 && code <= 122) {\r\n          for (var k = 0; k < j; k++) {\r\n            code -= 1;\r\n            if (code < 97) {\r\n              code = 122;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      c = String.fromCharCode(code)\r\n      output += c\r\n      j++\r\n    }\r\n    setText(output)\r\n  }\r\n\r\n  function copyTextToClipboard(text) {\r\n    \r\n    navigator.clipboard.writeText(text).then(function() {\r\n      console.log('Async: Copying to clipboard was successful!');\r\n    }, function(err) {\r\n      console.error('Async: Could not copy text: ', err);\r\n    });\r\n  }\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n\r\nexport default function BookCipher() {\r\n\r\n  const [value, setValue] = React.useState('');\r\n  const [text, setText] = React.useState('');\r\n  const [keyInput, setKeyInput] = React.useState('');\r\n\r\n\r\n  const handleValueChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleKeyInputChange = (event) => {\r\n    console.log(keyInput);\r\n    setKeyInput(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n      <Box sx={{ my: 3, mx: 2 }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\" align='left'>\r\n              Book Cipher\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n        <Typography color=\"text.secondary\" variant=\"body2\" align='left' sx={{ my: 3 }}>\r\n          Enter the text in plain text and then enter the key and press encrypt\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ m: 2 }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs align='left'>\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Input\"\r\n              multiline\r\n              minRows={2}\r\n              defaultValue=\"Enter Plain text here\"\r\n              value={value}\r\n              onChange={handleValueChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs align='left'>\r\n          <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Key\"\r\n              multiline\r\n              minRows={2}\r\n              value={keyInput}\r\n              onChange={(event)=>{setKeyInput(event.target.value)}}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n              <Button variant=\"contained\" onClick={() => encryptText()}>Encrypt &gt;</Button>\r\n            </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <TextField\r\n              id=\"outlined-read-only-input\"\r\n              label=\"Output\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n              multiline\r\n              minRows={2}\r\n              defaultValue=\"Encrypted text\"\r\n              value={text}\r\n              onChange={handleTextChange}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n              <Button variant=\"contained\" startIcon={<ContentCopyIcon />} onClick={() => copyTextToClipboard(text)}>Copy</Button>\r\n            </Box>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  )\r\n\r\n  function encryptText() {\r\n    var output = ''\r\n    setText(output)\r\n\r\n    var j = 0;\r\n\r\n    for (var i = 0; i < value.length; i++) {\r\n\r\n      if (j >= keyInput.length)\r\n      {\r\n        j = 0;\r\n      }\r\n      // Get the character we'll be appending\r\n      var c = value[i];\r\n      console.log('the character is ' + c)\r\n\r\n      // If it's not a letter...\r\n      if (!c.match(/[a-z]/i)) {\r\n        j = 1;\r\n        output += c;\r\n        continue;\r\n      }\r\n      // Get its code\r\n      var code = value.charCodeAt(i);\r\n      console.log('the character code is ' + code)\r\n      var keyCode = keyInput.charCodeAt(j);\r\n      console.log('the key position is ' + (keyCode - 97))\r\n\r\n      c = String.fromCharCode(((code - 97 + (keyCode - 97)) % 26) + 97);\r\n      console.log('the new character is ' + c)\r\n      output += c;\r\n      j++\r\n    }\r\n    setText(output)\r\n  }\r\n\r\n  function copyTextToClipboard(text) {\r\n    \r\n    navigator.clipboard.writeText(text).then(function() {\r\n      console.log('Async: Copying to clipboard was successful!');\r\n    }, function(err) {\r\n      console.error('Async: Could not copy text: ', err);\r\n    });\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n\r\nexport default function MorseCode() {\r\n\r\n  const [value, setValue] = React.useState('');\r\n  const [text, setText] = React.useState('');\r\n  const [key, setKey] = React.useState('');\r\n  const [flag, setFlag] = React.useState(false);\r\n\r\n\r\n  const handleValueChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleKeyChange = (event) => {\r\n    setKey(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n      <Box sx={{ my: 3, mx: 2 }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\" align='left'>\r\n              Morse Code\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n        <Typography color=\"text.secondary\" variant=\"body2\" align='left' sx={{ my: 3 }}>\r\n          Enter the text in plain text and then press convert\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ m: 2 }}>\r\n        <Grid container alignItems=\"center\">\r\n          <Grid item xs align='left'>\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Input\"\r\n              multiline\r\n              minRows={2}\r\n              defaultValue=\"Enter Plain text here\"\r\n              value={value}\r\n              onChange={handleValueChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs align='left'>\r\n            <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n              <Button variant=\"contained\" onClick={() => encryptText()}>Convert &gt;</Button>\r\n            </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <TextField\r\n              id=\"outlined-read-only-input\"\r\n              label=\"Output\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n              multiline\r\n              minRows={2}\r\n              defaultValue=\"Encrypted text\"\r\n              value={text}\r\n              onChange={handleTextChange}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs align='left'>\r\n            <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n              <Button variant=\"contained\" startIcon={<ContentCopyIcon />} onClick={() => copyTextToClipboard(text)}>Copy</Button>\r\n            </Box>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  )\r\n\r\n\r\n  function encryptText() {\r\n\r\n    var output = ''\r\n    setText(output)\r\n\r\n    var alphabet = {\r\n      'a': '.- ', 'b': '-... ', 'c': '-.-. ', 'd': '-.. ',\r\n      'e': '. ', 'f': '..-. ', 'g': '--. ', 'h': '.... ',\r\n      'i': '.. ', 'j': '.--- ', 'k': '-.- ', 'l': '.-.. ',\r\n      'm': '-- ', 'n': '-. ', 'o': '--- ', 'p': '.--. ',\r\n      'q': '--.- ', 'r': '.-. ', 's': '... ', 't': '- ',\r\n      'u': '..- ', 'v': '...- ', 'w': '.-- ', 'x': '-..- ',\r\n      'y': '-.-- ', 'z': '--.. ', ' ': ' / ',\r\n      '1': '.---- ', '2': '..--- ', '3': '...-- ', '4': '....- ',\r\n      '5': '..... ', '6': '-.... ', '7': '--... ', '8': '---.. ',\r\n      '9': '----. ', '0': '----- '\r\n    }\r\n\r\n    for (var i = 0; i < value.length; i++) {\r\n      output += alphabet[value.charAt(i).toLowerCase()];\r\n    }\r\n    setFlag(true)\r\n    setText(output)\r\n  }\r\n\r\n  function copyTextToClipboard(text) {\r\n    \r\n    navigator.clipboard.writeText(text).then(function() {\r\n      console.log('Async: Copying to clipboard was successful!');\r\n    }, function(err) {\r\n      console.error('Async: Could not copy text: ', err);\r\n    });\r\n  }\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n\r\nexport default function Binary() {\r\n\r\n    const [value, setValue] = React.useState('');\r\n    const [text, setText] = React.useState('');\r\n\r\n\r\n    const handleValueChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const handleTextChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n    return (\r\n        <Box sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n            <Box sx={{ my: 3, mx: 2 }}>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"div\" align='left'>\r\n                            Binary\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <Typography color=\"text.secondary\" variant=\"body2\" align='left' sx={{ my: 3 }}>\r\n                    Enter the number in plain text and press convert\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Box sx={{ m: 2 }}>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs align='left'>\r\n                        <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Input\"\r\n                            multiline\r\n                            minRows={4}\r\n                            defaultValue=\"Enter decimal numbers here\"\r\n                            value={value}\r\n                            onChange={handleValueChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs align='left'>\r\n                        <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n                            <Button variant=\"contained\" onClick={() => encryptText()}>Convert</Button>\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs align='left'>\r\n                        <TextField\r\n                            id=\"outlined-read-only-input\"\r\n                            label=\"Output\"\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                            multiline\r\n                            minRows={4}\r\n                            defaultValue=\"Converted number\"\r\n                            value={text}\r\n                            onChange={handleTextChange}\r\n                        />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs align='left'>\r\n                        <Box sx={{ mt: 3, ml: 1, mb: 1 }} align='left'>\r\n                            <Button variant=\"contained\" startIcon={<ContentCopyIcon />} onClick={() => copyTextToClipboard(text)}>Copy</Button>\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Box>\r\n        </Box>\r\n    )\r\n\r\n    function encryptText() {\r\n\r\n        var output = ''\r\n        setText(output)\r\n\r\n        // Go through each character\r\n        for (var i = 0; i < value.length; i++) {\r\n            // Get the character we'll be appending\r\n            var c = value[i];\r\n            output += dec2bin(c) + ' '\r\n        }\r\n        setText(output)\r\n\r\n    }\r\n\r\n    function dec2bin(dec) {\r\n        return (dec >>> 0).toString(2);\r\n      }\r\n\r\n      function copyTextToClipboard(text) {\r\n    \r\n        navigator.clipboard.writeText(text).then(function() {\r\n          console.log('Async: Copying to clipboard was successful!');\r\n        }, function(err) {\r\n          console.error('Async: Could not copy text: ', err);\r\n        });\r\n      }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport CesarCipher from './CesarCipher';\r\nimport BookCipher from './BookCipher';\r\nimport MorseCode from './MorseCode';\r\nimport Binary from './Binary';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box sx={{ p: 3 }}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `full-width-tab-${index}`,\r\n      'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n\r\nexport default function TresureHunt() {\r\n\r\n    const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"inherit\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"Binary\" {...a11yProps(0)} />\r\n          <Tab label=\"Cesar Cipher\" {...a11yProps(1)} />\r\n          <Tab label=\"Morse Code\" {...a11yProps(2)} />\r\n          <Tab label=\"Book Cipher\" {...a11yProps(3)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n          <Binary />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n          <CesarCipher/>\r\n        </TabPanel>\r\n        <TabPanel value={value} index={2} dir={theme.direction}>\r\n          <MorseCode />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={3} dir={theme.direction}>\r\n        <BookCipher/>\r\n        </TabPanel>\r\n      </SwipeableViews>\r\n    </Box>\r\n  );\r\n}\r\n","\r\nimport * as React from 'react';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\r\nimport MailIcon from '@mui/icons-material/Mail';\r\nimport TresureHunt from '../Treasure Hunt/TresureHunt';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst openedMixin = (theme) => ({\r\n  width: drawerWidth,\r\n  transition: theme.transitions.create('width', {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.enteringScreen,\r\n  }),\r\n  overflowX: 'hidden',\r\n});\r\n\r\nconst closedMixin = (theme) => ({\r\n  transition: theme.transitions.create('width', {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  overflowX: 'hidden',\r\n  width: `calc(${theme.spacing(7)} + 1px)`,\r\n  [theme.breakpoints.up('sm')]: {\r\n    width: `calc(${theme.spacing(9)} + 1px)`,\r\n  },\r\n});\r\n\r\nconst DrawerHeader = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'flex-end',\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar,\r\n}));\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n    boxSizing: 'border-box',\r\n    ...(open && {\r\n      ...openedMixin(theme),\r\n      '& .MuiDrawer-paper': openedMixin(theme),\r\n    }),\r\n    ...(!open && {\r\n      ...closedMixin(theme),\r\n      '& .MuiDrawer-paper': closedMixin(theme),\r\n    }),\r\n  }),\r\n);\r\n\r\nexport default function NavBar() {\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" open={open}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            sx={{\r\n              marginRight: '36px',\r\n              ...(open && { display: 'none' }),\r\n            }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap component=\"div\">\r\n            Side Projects\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer variant=\"permanent\" open={open}>\r\n        <DrawerHeader>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </DrawerHeader>\r\n        <Divider />\r\n        <List>\r\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>\r\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>\r\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\r\n        <DrawerHeader />\r\n        <TresureHunt />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './Components/NavBar/NavBar.js'\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nfunction App() {\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <NavBar />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}